- name: Initial setup
  become: yes
  become_user: root
  hosts: all
  roles:
    - general
    - docker
#Server 1
- name: Launch Syntropy Agent on server1
  become: yes
  become_user: root
  hosts: pgmaster
  roles:
    - deploy_agent
  vars:
    SYNTROPY_API_KEY: "{{ SYNTROPY_AGENT_API_KEY }}"
    SYNTROPY_TAGS: "server1"
    SYNTROPY_AGENT_NAME: "Server1"
    SYNTROPY_PROVIDER: "3"
  vars_files:
    - vars/main.yml

# Pgpool
- name: Launch Syntropy Agent  on server2
  become: yes
  become_user: root
  hosts: pgpool
  roles:
    - deploy_agent
  vars:
    SYNTROPY_API_KEY: "{{ SYNTROPY_AGENT_API_KEY }}"
    SYNTROPY_TAGS: "pgpool"
    SYNTROPY_AGENT_NAME: "pgpool"
    SYNTROPY_PROVIDER: "3"
  vars_files:
    - vars/main.yml

# Server 2
- name: Launch Syntropy Agent  on server2
  hosts: pgslave1
  roles:
    - deploy_agent
  vars:
    SYNTROPY_API_KEY: "{{ SYNTROPY_AGENT_API_KEY }}"
    SYNTROPY_TAGS: "server2"
    SYNTROPY_AGENT_NAME: "Server2"
    SYNTROPY_PROVIDER: "3"
  vars_files:
    - vars/main.yml

# Server 3
- name: Launch Syntropy Agent on server3
  hosts: pgslave2
  roles:
    - deploy_agent
  vars:
    SYNTROPY_API_KEY: "{{ SYNTROPY_AGENT_API_KEY }}"
    SYNTROPY_TAGS: "server3"
    SYNTROPY_AGENT_NAME: "Server3"
    SYNTROPY_PROVIDER: "3"
  vars_files:
    - vars/main.yml

# Deploy Postgres
- name: Install postgres
  become: yes
  become_user: root
  hosts: pgmaster, pgslave1, pgslave2
  roles:
    - common

# Master
- name: Configure master
  hosts: pgmaster
  roles:
    - master

# Slave
- name: COnfigure slave
  hosts: pgslave1, pgslave2
  roles:
    - slave

- name: configure master
  hosts: pgmaster
  become: yes
  become_user: postgres
  tasks:
    - postgresql_user: name=rails password=secret role_attr_flags=SUPERUSER

# Install Pgpool
- name: Install Pgpool
  become: yes
  become_user: root 
  hosts: pgpool
  roles:
    - pgpool
